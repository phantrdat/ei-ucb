# fig, ax = plt.subplots(2, figsize=(6, 8))
#         # plt.figure(figsize=(8, 5))
#         ax[0].plot(test_X.numpy().flatten(), objective_func(test_X.unsqueeze(1)).flatten().numpy(), 'k--', label='True Function')
#         ax[0].plot(test_X.numpy().flatten(), mean.numpy(), 'b-', label='GP Mean')
#         ax[0].fill_between(test_X.numpy().flatten(),
#                          (mean - 2*std).numpy(), (mean + 2*std).numpy(),
#                          alpha=0.2, color='blue', label='Confidence Interval')
#         ax[0].scatter(train_X.numpy(), train_Y.numpy(), color='red', label='Observations')
#         ax[0].scatter(next_x.numpy(), next_y.numpy(), color='green', marker='x', s=100, label='Next Point')
#         ax[0].set_xlabel('x')
#         ax[0].set_ylabel('Function Value')
#         ax[0].legend(loc='upper left', bbox_to_anchor=(0., -0.15), ncol=5, fontsize=6.25)
#         ax[0].set_title(f'Iteration {i+1} - {type} - {objective_func.__name__}')
        
#         # fig, ax2 = plt.subplots(figsize=(8, 3))
#         ax[1].plot(grid.flatten(), ei_values.numpy(), 'm-', label='EI')
#         ax[1].set_xlabel('x')
#         ax[1].set_ylabel('EI Values')
#         ax[1].set_title('Acquisition Function (EI)')
#         ax[1].legend()
#         plt.tight_layout()